/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StorageInterface extends ethers.utils.Interface {
  functions: {
    "addReceipt(address,address)": FunctionFragment;
    "addReceipts(address,address[])": FunctionFragment;
    "getReceipts(address)": FunctionFragment;
    "inverseLinkedAddresses(address)": FunctionFragment;
    "linkAddress(address,address)": FunctionFragment;
    "linkedAddresses(address)": FunctionFragment;
    "updateLinkedAddress(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReceipt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReceipts",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "getReceipts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "inverseLinkedAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "linkAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "linkedAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLinkedAddress",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addReceipt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inverseLinkedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLinkedAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class Storage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StorageInterface;

  functions: {
    addReceipt(
      userAddress: string,
      receiptAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReceipts(
      userAddress: string,
      receiptAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReceipts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    inverseLinkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    linkAddress(
      metamaskAddress: string,
      quorumAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { quorumAddress: string; isActive: boolean }
    >;

    updateLinkedAddress(
      oldMetamaskAddress: string,
      newMetamaskAddress: string,
      quorumAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addReceipt(
    userAddress: string,
    receiptAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReceipts(
    userAddress: string,
    receiptAddresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReceipts(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  inverseLinkedAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  linkAddress(
    metamaskAddress: string,
    quorumAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkedAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { quorumAddress: string; isActive: boolean }>;

  updateLinkedAddress(
    oldMetamaskAddress: string,
    newMetamaskAddress: string,
    quorumAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReceipt(
      userAddress: string,
      receiptAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReceipts(
      userAddress: string,
      receiptAddresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getReceipts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    inverseLinkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    linkAddress(
      metamaskAddress: string,
      quorumAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    linkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { quorumAddress: string; isActive: boolean }
    >;

    updateLinkedAddress(
      oldMetamaskAddress: string,
      newMetamaskAddress: string,
      quorumAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addReceipt(
      userAddress: string,
      receiptAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReceipts(
      userAddress: string,
      receiptAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReceipts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inverseLinkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkAddress(
      metamaskAddress: string,
      quorumAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateLinkedAddress(
      oldMetamaskAddress: string,
      newMetamaskAddress: string,
      quorumAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReceipt(
      userAddress: string,
      receiptAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReceipts(
      userAddress: string,
      receiptAddresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReceipts(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inverseLinkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkAddress(
      metamaskAddress: string,
      quorumAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateLinkedAddress(
      oldMetamaskAddress: string,
      newMetamaskAddress: string,
      quorumAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
