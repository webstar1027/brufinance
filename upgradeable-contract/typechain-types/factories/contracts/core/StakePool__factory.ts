/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StakePool,
  StakePoolInterface,
} from "../../../contracts/core/StakePool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakedTokenAdress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "changeDisburseTokenAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositInterest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolIndex",
        type: "uint256",
      },
    ],
    name: "disburseBruTokenToUsers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolIndex",
        type: "uint256",
      },
    ],
    name: "endLiquidityMiningInterval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolIndex",
        type: "uint256",
      },
    ],
    name: "getLatestIntervalForPool",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalLendAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalBorrowedAmount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        internalType: "struct LiquidityMiningInterval",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolIndex",
        type: "uint256",
      },
    ],
    name: "isIntervalActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "durationInDays",
        type: "uint256",
      },
    ],
    name: "startLiquidityMiningInterval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "updateBorrowAmountInInterval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "updateLendAmountInInterval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620010ac380380620010ac8339810160408190526200003491620001c2565b620000516103e86064620000a560201b62000bef1790919060201c565b600b55600080546001600160a01b039485166001600160a01b03199182161790915560028054938516938216939093179092556003805491909316911617905569021e19e0c9bab240000060015562000222565b6000620000c783670de0b6b3a764000084620000ce60201b62000c0b1760201c565b9392505050565b6000808060001985870985870292508281108382030391505080600014156200010e578382816200010357620001036200020c565b0492505050620000c7565b8381106200013d57604051631dcf306360e21b8152600481018290526024810185905260440160405180910390fd5b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b80516001600160a01b0381168114620001bd57600080fd5b919050565b600080600060608486031215620001d857600080fd5b620001e384620001a5565b9250620001f360208501620001a5565b91506200020360408501620001a5565b90509250925092565b634e487b7160e01b600052601260045260246000fd5b610e7a80620002326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637ec5ccfc116100665780637ec5ccfc146101325780639b7e4f0414610145578063c249e47314610158578063c74714b01461016b578063f7c8f7cd1461018e57600080fd5b8063503de2ab146100985780636af0843c146100a25780636e2af8b2146100b55780637c79270a1461011f575b600080fd5b6100a06101a1565b005b6100a06100b0366004610cd8565b610331565b6100c86100c3366004610cd8565b610537565b6040516101169190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b60405180910390f35b6100a061012d366004610d2c565b6105cd565b6100a0610140366004610cd8565b61081c565b6100a0610153366004610d2c565b61083f565b6100a0610166366004610d0a565b610a60565b61017e610179366004610cd8565b610bc0565b6040519015158152602001610116565b6100a061019c366004610cd8565b600155565b60005b60085481101561032e57600354600880546000926001600160a01b0316916370a0823191859081106101d8576101d8610e2e565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b15801561022357600080fd5b505afa158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610cf1565b90506000670de0b6b3a7640000600b54836102769190610db1565b6102809190610d8f565b600254600880549293506001600160a01b03909116916340c10f199190869081106102ad576102ad610e2e565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561030157600080fd5b505af1158015610315573d6000803e3d6000fd5b505050505050808061032690610de7565b9150506101a4565b50565b60008181526005602090815260408083205460078352818420818552835281842060020180548351818602810186019094528084529194939091908301828280156103a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610387575b505050505090506000600180546103bc9190610d8f565b905060006103c985610537565b90506103d6600283610d8f565b915060005b835181101561052f5760008060008460600151111561048257600061045f8560600151600660008c815260200190815260200160002060008a888151811061042557610425610e2e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000154610bef90919063ffffffff16565b9050670de0b6b3a76400006104748783610db1565b61047e9190610d8f565b9250505b60808401511561051a5760006104f78560800151600660008c815260200190815260200160002060008a88815181106104bd576104bd610e2e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010154610bef90919063ffffffff16565b9050670de0b6b3a764000061050c8783610db1565b6105169190610d8f565b9150505b5050808061052790610de7565b9150506103db565b505050505050565b6105726040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b50600090815260056020818152604092839020835160c08101855281548152600182015492810192909252600281015493820193909352600383015460608201526004830154608082015291015460ff16151560a082015290565b6000848152600460205260408120546105e890600190610dd0565b600086815260076020908152604080832084845282528083206001600160a01b038816845260010190915290205490915060ff161580156106545750600085815260076020908152604080832084845282528083206001600160a01b038716845290915290205460ff16155b156106bc5760008581526007602090815260408083208484528083528184206001600160a01b03881680865260018281018652938620805460ff1916851790559184526002018054928301815584529190922090910180546001600160a01b03191690911790555b600085815260076020908152604080832084845282528083206001600160a01b03871684528083528184208054600160ff1991821681179092559181019093529220805490921681179091558414156107755760008581526006602090815260408083206001600160a01b038716845290915281206001018054849290610744908490610d77565b90915550506000858152600560205260408120600401805484929061076a908490610d77565b909155506108159050565b83600214156107d95760008581526006602090815260408083206001600160a01b0387168452909152812060010180548492906107b3908490610dd0565b90915550506000858152600560205260408120600401805484929061076a908490610dd0565b60405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964207479706560a01b60448201526064015b60405180910390fd5b5050505050565b600081815260056020819052604090912001805460ff1916905561032e81610331565b60008481526004602052604081205461085a90600190610dd0565b600086815260076020908152604080832084845282528083206001600160a01b038816845260010190915290205490915060ff161580156108c65750600085815260076020908152604080832084845282528083206001600160a01b038716845290915290205460ff16155b1561092c5760008581526007602090815260408083208484528083528184206001600160a01b038816808652818552928520805460ff19166001908117909155918452600201805491820181558452919092200180546001600160a01b03191690911790555b600085815260076020908152604080832084845282528083206001600160a01b038716845260019081019092529091205460ff161515141561099e57600085815260076020908152604080832084845282528083206001600160a01b03871684529091529020805460ff191660011790555b83600114156109ff5760008581526006602090815260408083206001600160a01b0387168452909152812080548492906109d9908490610d77565b90915550506000858152600560205260408120600301805484929061076a908490610d77565b83600214156107d95760008581526006602090815260408083206001600160a01b038716845290915281208054849290610a3a908490610dd0565b90915550506000858152600560205260408120600301805484929061076a908490610dd0565b6000828152600560208190526040909120015460ff16151560011415610ac85760405162461bcd60e51b815260206004820152601d60248201527f416e20696e74657276616c20697320616c726561647920616374697665000000604482015260640161080c565b426000610ad88362015180610db1565b610ae29083610d77565b90506040518060c001604052806004600087815260200190815260200160002054815260200142815260200182815260200160008152602001600081526020016001151581525060056000868152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055509050506001600460008681526020019081526020016000206000828254610bb59190610d77565b909155505050505050565b60008181526005602081905260408220015460ff16151560011415610be757506001919050565b506000919050565b6000610c0483670de0b6b3a764000084610c0b565b9392505050565b600080806000198587098587029250828110838203039150508060001415610c4657838281610c3c57610c3c610e18565b0492505050610c04565b838110610c7057604051631dcf306360e21b8152600481018290526024810185905260440161080c565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b600060208284031215610cea57600080fd5b5035919050565b600060208284031215610d0357600080fd5b5051919050565b60008060408385031215610d1d57600080fd5b50508035926020909101359150565b60008060008060808587031215610d4257600080fd5b843593506020850135925060408501356001600160a01b0381168114610d6757600080fd5b9396929550929360600135925050565b60008219821115610d8a57610d8a610e02565b500190565b600082610dac57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610dcb57610dcb610e02565b500290565b600082821015610de257610de2610e02565b500390565b6000600019821415610dfb57610dfb610e02565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212204d0896855a80c667c06a76bd1edb642cadf2d62792cd115326f4000de19ec8c964736f6c63430008070033";

type StakePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakePool__factory extends ContractFactory {
  constructor(...args: StakePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factoryAddress: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _stakedTokenAdress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakePool> {
    return super.deploy(
      _factoryAddress,
      _tokenAddress,
      _stakedTokenAdress,
      overrides || {}
    ) as Promise<StakePool>;
  }
  override getDeployTransaction(
    _factoryAddress: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _stakedTokenAdress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factoryAddress,
      _tokenAddress,
      _stakedTokenAdress,
      overrides || {}
    );
  }
  override attach(address: string): StakePool {
    return super.attach(address) as StakePool;
  }
  override connect(signer: Signer): StakePool__factory {
    return super.connect(signer) as StakePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakePoolInterface {
    return new utils.Interface(_abi) as StakePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakePool {
    return new Contract(address, _abi, signerOrProvider) as StakePool;
  }
}
