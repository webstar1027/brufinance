/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type BondDetailsStruct = {
  bondId: PromiseOrValue<BigNumberish>;
  tokenAddress: PromiseOrValue<string>;
  bondTimestamp: PromiseOrValue<BigNumberish>;
  interest: PromiseOrValue<BigNumberish>;
  bondAmount: PromiseOrValue<BigNumberish>;
  lockTimePeriod: PromiseOrValue<BigNumberish>;
  day: PromiseOrValue<BigNumberish>;
};

export type BondDetailsStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  bondId: BigNumber;
  tokenAddress: string;
  bondTimestamp: BigNumber;
  interest: BigNumber;
  bondAmount: BigNumber;
  lockTimePeriod: BigNumber;
  day: BigNumber;
};

export interface BruPoolInterface extends utils.Interface {
  functions: {
    "addEndOfDayBalance()": FunctionFragment;
    "addToInactiveBonds(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowTokenAddress(address)": FunctionFragment;
    "borrow(address,string,address,uint256)": FunctionFragment;
    "borrowInterest(string)": FunctionFragment;
    "borrowedNft(string)": FunctionFragment;
    "changeBorrowInterestRate(uint256)": FunctionFragment;
    "changeBorrowPlatformFee(uint256)": FunctionFragment;
    "changeLendPlatformFee(uint256)": FunctionFragment;
    "changeLockPeriod(uint256)": FunctionFragment;
    "changeNonWithdrawFees(uint256)": FunctionFragment;
    "changeSpread(uint256)": FunctionFragment;
    "changeStableInterestRate(uint256)": FunctionFragment;
    "deposit(address,address,uint256)": FunctionFragment;
    "depositInterestForAll()": FunctionFragment;
    "disableBorrow()": FunctionFragment;
    "enableBorrow()": FunctionFragment;
    "getUserActiveBonds(address)": FunctionFragment;
    "getUserInactiveBonds(address)": FunctionFragment;
    "getWithdrawableBalance(address)": FunctionFragment;
    "initialize(address,address,address,address,address,string)": FunctionFragment;
    "lockPeriod()": FunctionFragment;
    "mintNft(uint256,string,string,uint256,uint256,string,string)": FunctionFragment;
    "name()": FunctionFragment;
    "nft(string)": FunctionFragment;
    "platformFees()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rates()": FunctionFragment;
    "redeemInterestToken(address,address,uint256)": FunctionFragment;
    "remove(uint256,address)": FunctionFragment;
    "removeFromInactiveBond(uint256,address)": FunctionFragment;
    "repay(address,string,uint256,address)": FunctionFragment;
    "totalExpense(string)": FunctionFragment;
    "transferBond(address,address,uint256)": FunctionFragment;
    "updateInterest(string)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addEndOfDayBalance"
      | "addToInactiveBonds"
      | "admin"
      | "allowTokenAddress"
      | "borrow"
      | "borrowInterest"
      | "borrowedNft"
      | "changeBorrowInterestRate"
      | "changeBorrowPlatformFee"
      | "changeLendPlatformFee"
      | "changeLockPeriod"
      | "changeNonWithdrawFees"
      | "changeSpread"
      | "changeStableInterestRate"
      | "deposit"
      | "depositInterestForAll"
      | "disableBorrow"
      | "enableBorrow"
      | "getUserActiveBonds"
      | "getUserInactiveBonds"
      | "getWithdrawableBalance"
      | "initialize"
      | "lockPeriod"
      | "mintNft"
      | "name"
      | "nft"
      | "platformFees"
      | "proxiableUUID"
      | "rates"
      | "redeemInterestToken"
      | "remove"
      | "removeFromInactiveBond"
      | "repay"
      | "totalExpense"
      | "transferBond"
      | "updateInterest"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEndOfDayBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToInactiveBonds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowTokenAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowInterest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowedNft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBorrowInterestRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBorrowPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLendPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeLockPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNonWithdrawFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSpread",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStableInterestRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInterestForAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActiveBonds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInactiveBonds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNft",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nft",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rates", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemInterestToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromInactiveBond",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalExpense",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBond",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEndOfDayBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToInactiveBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowedNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBorrowInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBorrowPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLendPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeNonWithdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStableInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInterestForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActiveBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInactiveBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemInterestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromInactiveBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalExpense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BorrowEvent(int8,address,uint256,uint256)": EventFragment;
    "LendEvent(int8,address,uint256,uint256)": EventFragment;
    "RepayEvent(int8,address,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BorrowEventEventObject {
  _type: number;
  userAddress: string;
  timestamp: BigNumber;
  tokenAmount: BigNumber;
}
export type BorrowEventEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  BorrowEventEventObject
>;

export type BorrowEventEventFilter = TypedEventFilter<BorrowEventEvent>;

export interface LendEventEventObject {
  _type: number;
  userAddress: string;
  timestamp: BigNumber;
  tokenAmount: BigNumber;
}
export type LendEventEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  LendEventEventObject
>;

export type LendEventEventFilter = TypedEventFilter<LendEventEvent>;

export interface RepayEventEventObject {
  _type: number;
  userAddress: string;
  timestamp: BigNumber;
  tokenAmount: BigNumber;
}
export type RepayEventEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  RepayEventEventObject
>;

export type RepayEventEventFilter = TypedEventFilter<RepayEventEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface BruPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BruPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEndOfDayBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowTokenAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrow(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowInterest(
      nftId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowedNft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrowedAmount: BigNumber; time: BigNumber }
    >;

    changeBorrowInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeBorrowPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeLendPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeLockPeriod(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeNonWithdrawFees(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSpread(
      _spread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeStableInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      userAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositInterestForAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableBorrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableBorrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getUserActiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BondDetailsStructOutput[]]>;

    getUserInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BondDetailsStructOutput[]]>;

    getWithdrawableBalance(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      adminAddress: PromiseOrValue<string>,
      factoryAddress: PromiseOrValue<string>,
      _poolTokenAddress: PromiseOrValue<string>,
      _interestTokenAddress: PromiseOrValue<string>,
      _treasuyAddress: PromiseOrValue<string>,
      poolName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintNft(
      tokenId: PromiseOrValue<BigNumberish>,
      nftId: PromiseOrValue<string>,
      commodityId: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      datahash: PromiseOrValue<string>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean, string, string] & {
        tokenId: BigNumber;
        commodityId: string;
        quantity: BigNumber;
        value: BigNumber;
        borrowed: boolean;
        dataHash: string;
        data: string;
      }
    >;

    platformFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { borrow: BigNumber; lend: BigNumber }>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rates(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { borrow: BigNumber; lend: BigNumber }>;

    redeemInterestToken(
      userAddress: PromiseOrValue<string>,
      requiredTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromInactiveBond(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalExpense(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { otherexpenses: BigNumber; interest: BigNumber }
    >;

    transferBond(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInterest(
      nftId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      userAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addEndOfDayBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToInactiveBonds(
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowTokenAddress(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrow(
    userAddress: PromiseOrValue<string>,
    nftId: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowInterest(
    nftId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowedNft(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { borrowedAmount: BigNumber; time: BigNumber }
  >;

  changeBorrowInterestRate(
    _interestRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeBorrowPlatformFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeLendPlatformFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeLockPeriod(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeNonWithdrawFees(
    _interestRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSpread(
    _spread: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeStableInterestRate(
    _interestRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    userAddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositInterestForAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableBorrow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableBorrow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getUserActiveBonds(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BondDetailsStructOutput[]>;

  getUserInactiveBonds(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BondDetailsStructOutput[]>;

  getWithdrawableBalance(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    adminAddress: PromiseOrValue<string>,
    factoryAddress: PromiseOrValue<string>,
    _poolTokenAddress: PromiseOrValue<string>,
    _interestTokenAddress: PromiseOrValue<string>,
    _treasuyAddress: PromiseOrValue<string>,
    poolName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  mintNft(
    tokenId: PromiseOrValue<BigNumberish>,
    nftId: PromiseOrValue<string>,
    commodityId: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    datahash: PromiseOrValue<string>,
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nft(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, boolean, string, string] & {
      tokenId: BigNumber;
      commodityId: string;
      quantity: BigNumber;
      value: BigNumber;
      borrowed: boolean;
      dataHash: string;
      data: string;
    }
  >;

  platformFees(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { borrow: BigNumber; lend: BigNumber }>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rates(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { borrow: BigNumber; lend: BigNumber }>;

  redeemInterestToken(
    userAddress: PromiseOrValue<string>,
    requiredTokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove(
    index: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromInactiveBond(
    index: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    userAddress: PromiseOrValue<string>,
    nftId: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalExpense(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { otherexpenses: BigNumber; interest: BigNumber }
  >;

  transferBond(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInterest(
    nftId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    userAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEndOfDayBalance(overrides?: CallOverrides): Promise<void>;

    addToInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowTokenAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowInterest(
      nftId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowedNft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrowedAmount: BigNumber; time: BigNumber }
    >;

    changeBorrowInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeBorrowPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLendPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeLockPeriod(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeNonWithdrawFees(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSpread(
      _spread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeStableInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      userAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositInterestForAll(overrides?: CallOverrides): Promise<void>;

    disableBorrow(overrides?: CallOverrides): Promise<void>;

    enableBorrow(overrides?: CallOverrides): Promise<void>;

    getUserActiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BondDetailsStructOutput[]>;

    getUserInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BondDetailsStructOutput[]>;

    getWithdrawableBalance(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      adminAddress: PromiseOrValue<string>,
      factoryAddress: PromiseOrValue<string>,
      _poolTokenAddress: PromiseOrValue<string>,
      _interestTokenAddress: PromiseOrValue<string>,
      _treasuyAddress: PromiseOrValue<string>,
      poolName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mintNft(
      tokenId: PromiseOrValue<BigNumberish>,
      nftId: PromiseOrValue<string>,
      commodityId: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      datahash: PromiseOrValue<string>,
      data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, boolean, string, string] & {
        tokenId: BigNumber;
        commodityId: string;
        quantity: BigNumber;
        value: BigNumber;
        borrowed: boolean;
        dataHash: string;
        data: string;
      }
    >;

    platformFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { borrow: BigNumber; lend: BigNumber }>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rates(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { borrow: BigNumber; lend: BigNumber }>;

    redeemInterestToken(
      userAddress: PromiseOrValue<string>,
      requiredTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromInactiveBond(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalExpense(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { otherexpenses: BigNumber; interest: BigNumber }
    >;

    transferBond(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInterest(
      nftId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      userAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "BorrowEvent(int8,address,uint256,uint256)"(
      _type?: null,
      userAddress?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      tokenAmount?: null
    ): BorrowEventEventFilter;
    BorrowEvent(
      _type?: null,
      userAddress?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      tokenAmount?: null
    ): BorrowEventEventFilter;

    "LendEvent(int8,address,uint256,uint256)"(
      _type?: null,
      userAddress?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      tokenAmount?: null
    ): LendEventEventFilter;
    LendEvent(
      _type?: null,
      userAddress?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      tokenAmount?: null
    ): LendEventEventFilter;

    "RepayEvent(int8,address,uint256,uint256)"(
      _type?: null,
      userAddress?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      tokenAmount?: null
    ): RepayEventEventFilter;
    RepayEvent(
      _type?: null,
      userAddress?: PromiseOrValue<string> | null,
      timestamp?: PromiseOrValue<BigNumberish> | null,
      tokenAmount?: null
    ): RepayEventEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    addEndOfDayBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowTokenAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrow(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowInterest(
      nftId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowedNft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeBorrowInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeBorrowPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeLendPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeLockPeriod(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeNonWithdrawFees(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSpread(
      _spread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeStableInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      userAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositInterestForAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableBorrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableBorrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getUserActiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawableBalance(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      adminAddress: PromiseOrValue<string>,
      factoryAddress: PromiseOrValue<string>,
      _poolTokenAddress: PromiseOrValue<string>,
      _interestTokenAddress: PromiseOrValue<string>,
      _treasuyAddress: PromiseOrValue<string>,
      poolName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    mintNft(
      tokenId: PromiseOrValue<BigNumberish>,
      nftId: PromiseOrValue<string>,
      commodityId: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      datahash: PromiseOrValue<string>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platformFees(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rates(overrides?: CallOverrides): Promise<BigNumber>;

    redeemInterestToken(
      userAddress: PromiseOrValue<string>,
      requiredTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromInactiveBond(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalExpense(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferBond(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInterest(
      nftId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      userAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEndOfDayBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowTokenAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowInterest(
      nftId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowedNft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeBorrowInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeBorrowPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeLendPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeLockPeriod(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeNonWithdrawFees(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSpread(
      _spread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeStableInterestRate(
      _interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      userAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositInterestForAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableBorrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableBorrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getUserActiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInactiveBonds(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawableBalance(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      adminAddress: PromiseOrValue<string>,
      factoryAddress: PromiseOrValue<string>,
      _poolTokenAddress: PromiseOrValue<string>,
      _interestTokenAddress: PromiseOrValue<string>,
      _treasuyAddress: PromiseOrValue<string>,
      poolName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintNft(
      tokenId: PromiseOrValue<BigNumberish>,
      nftId: PromiseOrValue<string>,
      commodityId: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      datahash: PromiseOrValue<string>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    platformFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemInterestToken(
      userAddress: PromiseOrValue<string>,
      requiredTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromInactiveBond(
      index: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      userAddress: PromiseOrValue<string>,
      nftId: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalExpense(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferBond(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInterest(
      nftId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      userAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
