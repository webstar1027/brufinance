{"version":3,"mappings":"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","names":["i0","NftCardComponent","constructor","fb","chainlinkService","this","EventEmitter","borrowForm","group","borrowAmount","repayAmount","nftId","commodity","quantity","price","borrowStatus","amountBorrowed","repaymentStatus","amountRepaid","ngOnInit","ngOnChanges","changes","nft","Object","currentValue","img","replace","console","log","_id","nftPrice","borrowed","borrowedAmount","repaid","repaidAmount","usdCharges","roundOffDecimal","convertInrToUsd","usdBorrowed","usdRepaid","patchValue","handleSubmitBorrow","invalid","borrowEvent","emit","handleSubmitRepay","repayEvent","convertDollarToMatic","val","toFixed","selectors","NftListComponent","nftService","web3Service","bootstrapWeb3","subscribe","accounts","networkId","loadData","err","alert","query","showSpinner","getAllNfts","skip","nfts","length","limit","pipe","finalize","fetchedData","response","totalAssets","totalAssetsValue","topCommodities","data","handleShowMore","modal_r17","oxw","_r4","modal_r28","CHM","modal_r37","routes","path","component","modalService","amountRepayed","amount","updateNFTVal","selectedNft","convertToLargestUnit","a","controls","addValidators","Validators","Math","round","Number","EPSILON","handleBorrow","event","modal","open","windowClass","backdrop","keyboard","handleRepay","eventName","name","convertUsdToInr","showLoaderForRepay","artifactsToContractV2","methods","getTokenId","call","then","tokenId","getBorrowDetails","borrowDetails","borrowInterest","getBorrowInterest","convertEthToWei","repay","send","from","getAccount","gas","value","result","urlToViewTransaction","maticurl","transactionHash","borrowSuccess","repaySuccess","updateNft","repayed","repayedAmount","catch","error","interest","days","Date","getTime","parseInt","parseFloat","convertToSmallestUnit","showLoaderForBorrow","borrow","borrowInternal","usdBorrow","usdEth","convertUsdToEth","ethWei","environment","repayBorrowInternal","usdRepay","sc","obj","nftIndex","findIndex","dismissAll","viewTransaction","window","priceConversions","maticUsd","eligibleLoanAmount","calculateInterestandPlatformFees","interestApplicable","platformFees","calculateInterestandTotalAmount","interestApplicableRepay","totalRepaymentAmount","UserNftsComponent","NftRoutingModule","RouterModule","NftModule","imports","CommonModule","ReactiveFormsModule","FormsModule"],"sources":["./src/app/modules/nft/components/nft-card/nft-card.component.html","./src/app/modules/nft/components/nft-card/nft-card.component.ts","./src/app/modules/nft/components/nft-list/nft-list.component.html","./src/app/modules/nft/components/nft-list/nft-list.component.ts","./src/app/modules/nft/components/user-nfts/user-nfts.component.html","./src/app/modules/nft/nft-routing.module.ts","./src/app/modules/nft/components/user-nfts/user-nfts.component.ts","./src/app/modules/nft/nft.module.ts"],"sourcesContent":["<div class=\"mainCard\">\r\n  <img class=\"imageCard\" src=\"../../../../../assets/nft/{{img}}.jpg\">\r\n  <p class=\"cardTitle\">{{nft.commodity}}</p>\r\n  <p class=\"cardCard\">Quantity : <span class=\"lightColorTheme spanMainCard\">{{nft.quantity}} KGs</span></p>\r\n  <p class=\"cardCard\">Value : <span class=\"lightColorTheme spanMainCard\">\r\n      {{convertDollarToMatic(borrowForm.value.price)}} MATIC ( $ {{borrowForm.value.price}} )</span></p>\r\n  <p class=\"mainBtn\" (click)=\"handleSubmitBorrow()\" *ngIf=\"!nft.borrowed\">Borrow</p>\r\n  <p class=\"repayBtn\" (click)=\"handleSubmitRepay()\" *ngIf=\"!nft.repayed && nft.borrowed\">Repay</p>\r\n  <div class=\"Button\" *ngIf=\"!readOnly\">\r\n    <!-- <button *ngIf=\"!nft.borrowed\" [disabled]=\"borrowForm.invalid || nft.borrowed\" type=\"submit\" class=\"btn btn-primary\"\r\n      btn-lg btn-block>BORROW</button> -->\r\n  </div>\r\n  <div class=\"Button\" *ngIf=\"!nft.repayed && nft.borrowed\">\r\n    <!-- <button [disabled]=\"borrowForm.invalid || nft.repayed\" type=\"submit\" name=\"\" id=\"\" class=\"btn btn-primary\" btn-lg\r\n      btn-block>REPAY</button> -->\r\n  </div>\r\n</div>\r\n\r\n<!-- \r\n<form [formGroup]=\"borrowForm\" (ngSubmit)=\"nft.borrowed ? handleSubmitRepay() : handleSubmitBorrow()\">\r\n  <div class=\"Card  text-left \">\r\n    <img class=\"img\" src=\"../../../../../assets/nft/{{img}}.jpg\">\r\n    <div class=\"row val\">\r\n      <div class=\"col name\" for=\"nftId\">\r\n        NFT ID\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"readonly\" class=\"form-control-plaintext\" id=\"nftId\" formControlName=\"nftId\">\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\">\r\n      <div class=\"col name\" for=\"commodity\">\r\n        Commodity\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"commodity\" formControlName=\"commodity\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\">\r\n      <div class=\"col name\" for=\"quantity\">\r\n        Quantity\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"quantity\" formControlName=\"quantity\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\">\r\n      <div class=\"col name\" for=\"price\">\r\n        Price\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"price\"\r\n          [value]=\"borrowForm.value.price | currency: 'USD'\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\" *ngIf=\"!nft.borrowed\">\r\n      <div class=\"col name\">\r\n        Borrow Amount\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input [type]=\"nft.borrowed || readOnly ? 'text' : 'number'\" [ngClass]=\"\r\n              nft.borrowed || readOnly\r\n                ? 'form-control-plaintext'\r\n                : 'form-control-plaintext'\r\n            \" [readonly]=\"true\" id=\"borrowAmount\" formControlName=\"borrowAmount\" />\r\n        <ng-container *ngIf=\"\r\n            !nft.borrowed &&\r\n            borrowForm.controls.borrowAmount.errors &&\r\n            (borrowForm.controls.borrowAmount.touched ||\r\n              borrowForm.controls.borrowAmount.dirty)\r\n          \">\r\n          <p class=\"text-danger\">\r\n            <ng-container *ngIf=\"borrowForm.controls.borrowAmount.errors.required\">\r\n              Borrow Amount is required\r\n            </ng-container>\r\n            <ng-container *ngIf=\"borrowForm.controls.borrowAmount.errors.min\">\r\n              Borrow Amount must not be less than\r\n              {{\r\n              borrowForm.controls.borrowAmount.errors.min.min\r\n              | currency: \"USD\"\r\n              }}\r\n            </ng-container>\r\n            <ng-container *ngIf=\"borrowForm.controls.borrowAmount.errors.max\">\r\n              Borrow Amount must not be more than\r\n              {{\r\n              borrowForm.controls.borrowAmount.errors.max.max\r\n              | currency: \"USD\"\r\n              }}\r\n              (70% of the price amount)\r\n            </ng-container>\r\n          </p>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\">\r\n      <div class=\"col name\" for=\"borrowStatus\">\r\n        Borrow Status\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"borrowStatus\"\r\n          [value]=\"nft.borrowed ? 'Pledged' : 'Available to Borrow'\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\">\r\n      <div class=\"col name\" for=\"amountBorrowed\">\r\n        Amount Borrowed\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"amountBorrowed\"\r\n          formControlName=\"amountBorrowed\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\" *ngIf=\"nft.borrowed\">\r\n      <div class=\"col name\" for=\"amountBorrowed\">\r\n        Repayment Amount\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"amountBorrowed\"\r\n          formControlName=\"amountBorrowed\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\" *ngIf=\"!nft.repayed && nft.borrowed\">\r\n      <div class=\"col name\" for=\"repayAmount\">\r\n        Repay Amount\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input [type]=\"nft.repayed || readOnly ? 'text' : 'text'\" [ngClass]=\"\r\n        nft.repayed || readOnly\r\n          ? 'form-control-plaintext'\r\n          : 'form-control-plaintext'\r\n      \" [readonly]=\"true\" id=\"repayAmount\" formControlName=\"repayAmount\" />\r\n        <ng-container *ngIf=\"\r\n        !nft.repayed &&\r\n        borrowForm.controls.repayAmount.errors &&\r\n        (borrowForm.controls.repayAmount.touched ||\r\n          borrowForm.controls.repayAmount.dirty)\">\r\n          <p class=\"text-danger\">\r\n            <ng-container *ngIf=\"borrowForm.controls.repayAmount.errors.required\">\r\n              Repay Amount is required\r\n            </ng-container>\r\n            <ng-container *ngIf=\"borrowForm.controls.repayAmount.errors.min\">\r\n              Repay Amount must not be less than\r\n              {{\r\n              borrowForm.controls.repayAmount.errors.min.min\r\n              | currency: \"USD\"\r\n              }}\r\n            </ng-container>\r\n            <ng-container *ngIf=\"borrowForm.controls.repayAmount.errors.max\">\r\n              Repay Amount must not be more than\r\n              {{\r\n              borrowForm.controls.repayAmount.errors.max.max\r\n              | currency: \"USD\"\r\n              }}\r\n            </ng-container>\r\n          </p>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row val\" *ngIf=\"nft.borrowed && nft.repayed\">\r\n      <div class=\"col name\" for=\"amountRepayed\">\r\n        Amount Repayed\r\n      </div>\r\n      <div class=\"col-7 value\">\r\n        <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"amountRepayed\" formControlName=\"amountRepayed\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"Button\" *ngIf=\"!readOnly\">\r\n    <button *ngIf=\"!nft.borrowed\" [disabled]=\"borrowForm.invalid || nft.borrowed\" type=\"submit\" class=\"btn btn-primary\"\r\n      btn-lg btn-block>BORROW</button>\r\n  </div>\r\n  <div class=\"Button\" *ngIf=\"!nft.repayed && nft.borrowed\">\r\n    <button [disabled]=\"borrowForm.invalid || nft.repayed\" type=\"submit\" name=\"\" id=\"\" class=\"btn btn-primary\" btn-lg\r\n      btn-block>REPAY</button>\r\n  </div>\r\n</form> -->\r\n\r\n\r\n\r\n\r\n\r\n<!-- <div class=\"card\">\r\n  <div class=\"card-body\">\r\n    <form [formGroup]=\"borrowForm\" (ngSubmit)=\"nft.borrowed ? handleSubmitRepay() : handleSubmitBorrow()\">\r\n      <div class=\"form-group row mb-0\">\r\n        <label for=\"nftId\" class=\"col-sm-4 col-form-label\">NFT ID</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"nftId\" formControlName=\"nftId\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"form-group row mb-0\">\r\n        <label for=\"commodity\" class=\"col-sm-4 col-form-label\">Commodity</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"commodity\" formControlName=\"commodity\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row mb-0\">\r\n        <label for=\"quantity\" class=\"col-sm-4 col-form-label\">Quantity</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"quantity\" formControlName=\"quantity\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row mb-0\">\r\n        <label for=\"price\" class=\"col-sm-4 col-form-label\">Price</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"price\"\r\n            [value]=\"borrowForm.value.price | currency: 'USD'\" />\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"!nft.borrowed\" class=\"form-group row mb-0\">\r\n        <label for=\"borrowAmount\" class=\"col-sm-4 col-form-label\">Borrow Amount</label>\r\n        <div class=\"col-sm-8\">\r\n          <input [type]=\"nft.borrowed || readOnly ? 'text' : 'number'\" [ngClass]=\"\r\n              nft.borrowed || readOnly\r\n                ? 'form-control-plaintext'\r\n                : 'form-control'\r\n            \" [readonly]=\"nft.borrowed || readOnly\" id=\"borrowAmount\" formControlName=\"borrowAmount\" />\r\n          <ng-container *ngIf=\"\r\n              !nft.borrowed &&\r\n              borrowForm.controls.borrowAmount.errors &&\r\n              (borrowForm.controls.borrowAmount.touched ||\r\n                borrowForm.controls.borrowAmount.dirty)\r\n            \">\r\n            <p class=\"text-danger\">\r\n              <ng-container *ngIf=\"borrowForm.controls.borrowAmount.errors.required\">\r\n                Borrow Amount is required\r\n              </ng-container>\r\n              <ng-container *ngIf=\"borrowForm.controls.borrowAmount.errors.min\">\r\n                Borrow Amount must not be less than\r\n                {{\r\n                borrowForm.controls.borrowAmount.errors.min.min\r\n                | currency: \"USD\"\r\n                }}\r\n              </ng-container>\r\n              <ng-container *ngIf=\"borrowForm.controls.borrowAmount.errors.max\">\r\n                Borrow Amount must not be more than\r\n                {{\r\n                borrowForm.controls.borrowAmount.errors.max.max\r\n                | currency: \"USD\"\r\n                }}\r\n                (70% of the price amount)\r\n              </ng-container>\r\n            </p>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row mb-0\">\r\n        <label for=\"borrowStatus\" class=\"col-sm-4 col-form-label\">Borrow Status</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"borrowStatus\"\r\n            [value]=\"nft.borrowed ? 'Pledged' : 'Available to Borrow'\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row mb-0\">\r\n        <label for=\"amountBorrowed\" class=\"col-sm-4 col-form-label\">Amount Borrowed</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"amountBorrowed\"\r\n            formControlName=\"amountBorrowed\" />\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"nft.borrowed\" class=\"form-group row mb-0\">\r\n        <label for=\"amountBorrowed\" class=\"col-sm-4 col-form-label\">Repayment Amount</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"amountBorrowed\"\r\n            formControlName=\"amountBorrowed\" />\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"!nft.repayed && nft.borrowed\" class=\"form-group row mb-0\">\r\n        <label for=\"repayAmount\" class=\"col-sm-4 col-form-label\">Repay Amount</label>\r\n        <div class=\"col-sm-8\">\r\n          <input [type]=\"nft.repayed || readOnly ? 'text' : 'number'\" [ngClass]=\"\r\n              nft.repayed || readOnly\r\n                ? 'form-control-plaintext'\r\n                : 'form-control'\r\n            \" [readonly]=\"nft.repayed || readOnly\" id=\"repayAmount\" formControlName=\"repayAmount\" />\r\n          <ng-container *ngIf=\"\r\n              !nft.repayed &&\r\n              borrowForm.controls.repayAmount.errors &&\r\n              (borrowForm.controls.repayAmount.touched ||\r\n                borrowForm.controls.repayAmount.dirty)\r\n            \">\r\n            <p class=\"text-danger\">\r\n              <ng-container *ngIf=\"borrowForm.controls.repayAmount.errors.required\">\r\n                Repay Amount is required\r\n              </ng-container>\r\n              <ng-container *ngIf=\"borrowForm.controls.repayAmount.errors.min\">\r\n                Repay Amount must not be less than\r\n                {{\r\n                borrowForm.controls.repayAmount.errors.min.min\r\n                | currency: \"USD\"\r\n                }}\r\n              </ng-container>\r\n              <ng-container *ngIf=\"borrowForm.controls.repayAmount.errors.max\">\r\n                Repay Amount must not be more than\r\n                {{\r\n                borrowForm.controls.repayAmount.errors.max.max\r\n                | currency: \"USD\"\r\n                }}\r\n              </ng-container>\r\n            </p>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"nft.borrowed && nft.repayed\" class=\"form-group row mb-0\">\r\n        <label for=\"amountRepayed\" class=\"col-sm-4 col-form-label\">Amount Repayed</label>\r\n        <div class=\"col-sm-8\">\r\n          <input type=\"text\" readonly class=\"form-control-plaintext\" id=\"amountRepayed\"\r\n            formControlName=\"amountRepayed\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"mt-3\" *ngIf=\"!readOnly\">\r\n        <div *ngIf=\"!nft.borrowed\" class=\"d-flex justify-content-end\">\r\n          <button [disabled]=\"borrowForm.invalid || nft.borrowed\" type=\"submit\" class=\"btn btn-primary mr-2\">\r\n            Borrow\r\n          </button>\r\n        </div>\r\n        <div *ngIf=\"!nft.repayed && nft.borrowed\" class=\"d-flex justify-content-end\">\r\n          <button [disabled]=\"borrowForm.invalid || nft.repayed\" type=\"submit\" class=\"btn btn-warning mr-2\">\r\n            Repay\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div> -->","import { NgtscCompilerHost } from '@angular/compiler-cli/src/ngtsc/file_system';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ChainlinkAPIService } from 'src/app/common/services/chainlink-api.service';\r\n@Component({\r\n  selector: 'app-nft-card',\r\n  templateUrl: './nft-card.component.html',\r\n  styleUrls: ['./nft-card.component.css'],\r\n})\r\nexport class NftCardComponent implements OnChanges, OnInit {\r\n  @Input() nft: any;\r\n  @Input() readOnly: boolean = false;\r\n  @Output('borrow') borrowEvent: EventEmitter<any> = new EventEmitter();\r\n  @Output('repay') repayEvent: EventEmitter<any> = new EventEmitter();\r\n  borrowBtnClicked: boolean = false;\r\n  borrowForm: FormGroup;\r\n  inrUsdPrice: any;\r\n  ethUsd: any;\r\n  inrUsd: any;\r\n  img: any;\r\n  path = '../../../../../assets/'\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private chainlinkService: ChainlinkAPIService\r\n  ) {\r\n    this.borrowForm = this.fb.group({\r\n      borrowAmount: [0],\r\n      repayAmount: [0],\r\n      nftId: [''],\r\n      commodity: [''],\r\n      quantity: [''],\r\n      price: [''],\r\n      borrowStatus: [''],\r\n      amountBorrowed: [''],\r\n      repaymentStatus: [''],\r\n      amountRepaid: [''],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.nft = { ...changes.nft.currentValue };\r\n    this.img = this.nft.commodity.replace(\"/\", \"-\", \" \", \"-\", \"  \", \"-\")\r\n\r\n    console.log(this.nft)\r\n    // console.log(this.img)\r\n\r\n    const {\r\n      _id,\r\n      commodity,\r\n      quantity,\r\n      nftPrice,\r\n      borrowed,\r\n      borrowedAmount,\r\n      repaid,\r\n      repaidAmount,\r\n    } = this.nft;\r\n\r\n    const usdCharges = this.chainlinkService.roundOffDecimal(\r\n      this.chainlinkService.convertInrToUsd(nftPrice)\r\n    );\r\n\r\n    const usdBorrowed = this.chainlinkService.roundOffDecimal(\r\n      this.chainlinkService.convertInrToUsd(borrowedAmount)\r\n    );\r\n\r\n    const usdRepaid = this.chainlinkService.roundOffDecimal(\r\n      this.chainlinkService.convertInrToUsd(repaidAmount)\r\n    );\r\n\r\n    this.borrowForm.patchValue({\r\n      nftId: _id,\r\n      commodity: commodity,\r\n      quantity: quantity,\r\n      price: usdCharges,\r\n      borrowStatus: borrowed,\r\n      amountBorrowed: usdBorrowed,\r\n      repaymentStatus: repaid,\r\n      amountRepaid: usdRepaid,\r\n    });\r\n\r\n    if (this.readOnly) return;\r\n\r\n    // if (borrowed) {\r\n    //   this.borrowForm.controls.repayAmount.addValidators([\r\n    //     Validators.required,\r\n    //     Validators.min(1),\r\n    //     Validators.max(borrowedAmount),\r\n    //   ]);\r\n    // } else {\r\n    //   this.borrowForm.controls.borrowAmount.addValidators([\r\n    //     Validators.required,\r\n    //     Validators.min(1),\r\n    //     Validators.max(\r\n    //       Math.round((usdCharges * 0.7 + Number.EPSILON) * 100) / 100\r\n    //     ),\r\n    //   ]);\r\n    // }\r\n  }\r\n\r\n  handleSubmitBorrow() {\r\n    if (this.borrowForm.invalid) return;\r\n    // const value = {\r\n    //   nftId: this.borrowForm.value.nftId,\r\n    //   borrowAmount: this.chainlinkService.roundOffDecimal(\r\n    //     this.chainlinkService.convertUsdToInr(\r\n    //       this.borrowForm.value.borrowAmount\r\n    //     )\r\n    //   ),\r\n    // };\r\n    // alert(\"hellow internal borrow\")\r\n    this.borrowEvent.emit(this.nft);\r\n  }\r\n\r\n  handleSubmitRepay() {\r\n    if (this.borrowForm.invalid) return;\r\n    // console.log(this.borrowForm.value);\r\n\r\n    // const value = {\r\n    //   nftId: this.borrowForm.value.nftId,\r\n    //   repayAmount: this.chainlinkService.roundOffDecimal(\r\n    //     this.chainlinkService.convertUsdToInr(this.borrowForm.value.repayAmount)\r\n    //   ),\r\n    // };\r\n    // console.log(value)\r\n\r\n    this.repayEvent.emit(this.nft);\r\n  }\r\n\r\n  convertDollarToMatic(val: any) {\r\n    return (val * 0.61728).toFixed(4)\r\n  }\r\n}","<div class=\"p-4\">\r\n  <div class=\"d-flex\">\r\n    <div class=\"ml-auto\">\r\n      <h3>Total Assets</h3>\r\n      <h3>{{ totalAssets }}</h3>\r\n      <br />\r\n      <h3>Total Value of Assets</h3>\r\n      <h3>$ {{ totalAssetsValue }}</h3>\r\n      <br />\r\n      <h3>Top Commodities</h3>\r\n      <ul class=\"list-unstyled\">\r\n        <li class=\"m-2\" *ngFor=\"let commodity of topCommodities; let i = index\">\r\n          {{ i + 1 }}. {{ commodity.name }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"fetchedData\" class=\"row\">\r\n    <div *ngFor=\"let nft of nfts\" class=\"col-md-3 p-3\">\r\n      <app-nft-card [readOnly]=\"true\" [nft]=\"nft\"></app-nft-card>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"text-center p-3\" *ngIf=\"showSpinner\">\r\n    <div class=\"spinner-border text-primary\" role=\"status\">\r\n      <span class=\"sr-only\">Loading...</span>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"fetchedData\" class=\"text-center\">\r\n    <button class=\"btn btn-lg\" (click)=\"handleShowMore()\">\r\n      Show more &rarr;\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { NftService } from '../../services/nft.service';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { ChainlinkAPIService } from 'src/app/common/services/chainlink-api.service';\r\nimport { TopCommodity } from '../../../../common/models/top-commodity';\r\nimport { Web3Service } from 'src/app/common/services/web3.service';\r\n\r\n@Component({\r\n  selector: 'app-nft-list',\r\n  templateUrl: './nft-list.component.html',\r\n  styleUrls: ['./nft-list.component.css'],\r\n})\r\nexport class NftListComponent implements OnInit {\r\n  fetchedData: boolean = false;\r\n  showSpinner: boolean = false;\r\n  nfts: any[] = [];\r\n  totalAssets: number = 0;\r\n  totalAssetsValue: number = 0;\r\n  topCommodities: TopCommodity[] = [];\r\n  networkId: string = '';\r\n\r\n  constructor(\r\n    private nftService: NftService,\r\n    private chainlinkService: ChainlinkAPIService,\r\n    private web3Service : Web3Service\r\n  ) { }\r\n\r\n  // ngOnInit(): void {\r\n    \r\n  ngOnInit(): void {\r\n    this.web3Service.bootstrapWeb3().subscribe(\r\n      (accounts: string[]) => {\r\n        this.networkId = accounts[0] || '';\r\n        this.loadData();\r\n      },\r\n      (err) => {\r\n        alert('Web3 bootstrap failed');\r\n      }\r\n    );\r\n  }\r\n  // this.loadData();\r\n\r\n  loadData(query: { skip?: Number; limit?: Number } = {}) {\r\n    this.showSpinner = true;\r\n    const skip = query.skip || this.nfts.length;\r\n    const limit = query.limit || 10;\r\n\r\n    this.nftService\r\n      .getAllNfts({ skip, limit })\r\n      .pipe(\r\n        finalize(() => {\r\n          this.fetchedData = true;\r\n          this.showSpinner = false;\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        this.totalAssets = response.totalAssets;\r\n        this.totalAssetsValue = this.chainlinkService.roundOffDecimal(\r\n          this.chainlinkService.convertInrToUsd(response.totalAssetsValue)\r\n        );\r\n        this.topCommodities = response.topCommodities;\r\n        this.nfts = [...this.nfts, ...response.data];\r\n        console.log(this.nfts)\r\n      });\r\n  }\r\n\r\n  handleShowMore() {\r\n    this.loadData();\r\n  }\r\n}\r\n","<div class=\"p-4\">\r\n  <div *ngIf=\"fetchedData\" class=\"row\">\r\n    <div *ngFor=\"let nft of nfts\" class=\"col-md-3 p-3\">\r\n      <app-nft-card [nft]=\"nft\" (borrow)=\"handleBorrow($event, borrowM)\" (repay)=\"handleRepay($event, repayM)\">\r\n      </app-nft-card>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"text-center p-3\" *ngIf=\"showSpinner\">\r\n    <div class=\"spinner-border text-primary\" role=\"status\">\r\n      <span class=\"sr-only\">Loading...</span>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"fetchedData && nfts.length\" class=\"text-center\">\r\n    <button class=\"btn btn-lg\" (click)=\"handleShowMore()\">\r\n      Show more &rarr;\r\n    </button>\r\n  </div>\r\n\r\n  <div *ngIf=\"fetchedData && !nfts.length && !showSpinner\">\r\n    <p class=\"text-center m-3\">No NFTs found</p>\r\n  </div>\r\n</div>\r\n<!-- <ng-template #repayM let-modal>\r\n  <div class=\"modal-body p-4 deposit-modal\">\r\n    <i class=\"fa fa-times closeeBtn\" data-dismiss=\"modal\" (click)=\"modal.dismiss()\"></i>\r\n    <h3 class=\"modalH3\">Repayment of {{selectedNft.commodity}}</h3>\r\n    <div class=\"row mainRow\">\r\n      <div class=\"width40\" style=\"width: 42%;\">\r\n        <img src=\"../../../../../assets/nft/{{img}}.jpg\" style=\"width: 88%;\r\n        border-radius: 8px;\">\r\n        <p class=\"repayModalDescription\">You are repaying the borrowed Soyabean stored in our ware- house in MATIC</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"width60\" style=\"width: 58%;\"> </div>\r\n  </div>\r\n</ng-template> -->\r\n<ng-template #successModal let-modal>\r\n  <div class=\"modal-body p-4 deposit-modal\" *ngIf=\"borrowSuccess\">\r\n    <i class=\"fa fa-times closeeBtn\" data-dismiss=\"modal\" (click)=\"modal.dismiss('Cross Click')\"></i>\r\n    <h3 class=\"modalH3\">Borrowing Successful</h3>\r\n    <div class=\"successModaldivPSuccess\">\r\n      <i class=\"fa fa-check-circle depositSUccessPIcon\"></i>\r\n      <p class=\"depositSuccessModalPL\">Transaction completed.</p>\r\n    </div>\r\n    <div class=\"successModaldiv\">\r\n      <p class=\"youDepositedMsg\" style=\"text-align: center;\">Borrowed: <span\r\n          class=\"lightColorTheme\">{{borrowAmount}}</span><span class=\"darkColorTheme\"> MATIC</span>\r\n      </p>\r\n      <p class=\"successModaldivP youDepositedSubMsg\">Your borrowing is shown on the <a style=\"color: #7C037B;\"\r\n          href=\"/nfts/my\"><span class=\"lightColorTheme\">My\r\n            NFTs</span></a></p>\r\n    </div>\r\n    <p style=\"margin-bottom: 0;\r\n    text-align: center;\">You can also view the transaction on <span class=\"lightColorTheme\">Polygon Blockchain</span>\r\n    </p>\r\n    <br />\r\n    <div style=\"text-align: center;\">\r\n      <button class=\"button button--deposit\" (click)=\"viewTransaction()\">\r\n        View on Polygon\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-body p-4 deposit-modal\" *ngIf=\"repaySuccess\">\r\n    <i class=\"fa fa-times closeeBtn\" data-dismiss=\"modal\" (click)=\"modal.dismiss('Cross Click')\"></i>\r\n    <h3 class=\"modalH3\">Repayment Successful</h3>\r\n    <div class=\"successModaldivPSuccess\">\r\n      <i class=\"fa fa-check-circle depositSUccessPIcon\"></i>\r\n      <p class=\"depositSuccessModalPL\">Transaction completed.</p>\r\n    </div>\r\n    <div class=\"successModaldiv\">\r\n      <p class=\"youDepositedMsg\" style=\"text-align: center;\">Repaid: <span\r\n          class=\"lightColorTheme\">{{repayAmount}}</span><span class=\"darkColorTheme\"> MATIC</span>\r\n      </p>\r\n      <p class=\"successModaldivP youDepositedSubMsg\">Your repayment is shown on the <a style=\"color: #7C037B;\"\r\n          href=\"/nfts/my\"><span class=\"lightColorTheme\">My\r\n            NFTs</span></a></p>\r\n    </div>\r\n    <p style=\"margin-bottom: 0;\r\n    text-align: center;\">You can also view the transaction on <span class=\"lightColorTheme\">Polygon Blockchain</span>\r\n    </p>\r\n    <br />\r\n    <div style=\"text-align: center;\">\r\n      <button class=\"button button--deposit\" (click)=\"viewTransaction()\">\r\n        View on Polygon\r\n      </button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n\r\n<ng-template #borrowM let-modal>\r\n  <div class=\"modal-body p-4 deposit-modal\">\r\n    <i class=\"fa fa-times closeeBtn\" data-dismiss=\"modal\" (click)=\"modal.dismiss('Cross Click')\"></i>\r\n    <h3 class=\"modalH3\">Borrow</h3>\r\n    <div class=\"row mainRow\">\r\n      <div class=\"width40\" style=\"width: 42%;\">\r\n        <img src=\"../../../../../assets/nft/{{img}}.jpg\" style=\"width: 88%;height: 178px;\r\n        border-radius: 8px;\">\r\n        <p class=\"highlightTextModal\">You are lending <span class=\"lightColorTheme\">MATIC</span> against <span\r\n            class=\"lightColorTheme\">{{selectedNft.commodity}}</span> stored in our warehouses</p>\r\n      </div>\r\n      <div class=\"width60\" style=\"width: 58%;\">\r\n        <p class=\"pModalTxt\">Commodity Value : <span class=\"lightColorTheme spanMainCard\">\r\n            {{convertDollarToMatic(eligibleLoanAmount(borrowForm.value.price))}} MATIC ( $\r\n            {{borrowForm.value.price}}\r\n            )</span></p>\r\n        <p class=\"pEligibleAmount\">Eligible Loan Amount : <span class=\"lightColorTheme spanMainCard\">$\r\n            {{eligibleLoanAmount(borrowForm.value.price)}}</span></p>\r\n        <p class=\"pModalTxt\" style=\"margin-bottom: 24px;\r\n        margin-top: 20px;\">Enter Loan Amount ( in MATIC ) :\r\n          <input type=\"number\" class=\"inputLoanAmount\" [(ngModel)]=\"borrowAmount\" style=\"margin-top: -6px;\"\r\n            (ngModelChange)=\"calculateInterestandPlatformFees($event)\">\r\n        </p>\r\n        <p class=\"pModalTxt\">Interest Applicable ( @13% p.a. ) : <span class=\"lightColorTheme spanMainCard\">\r\n            {{interestApplicable}} MATIC</span></p>\r\n        <p class=\"pModalTxt\">Platform Fees ( @0.25% ) : <span class=\"lightColorTheme spanMainCard\">\r\n            {{platformFees}} MATIC</span></p>\r\n        <p *ngIf=\"!showLoaderForBorrow\" class=\"mainBtn\" (click)=\"handleSubmitBorrow('borrow', successModal)\">Borrow Now\r\n        </p>\r\n        <p *ngIf=\"showLoaderForBorrow\" class=\"mainBtn\"><i class=\"fa fa-spin fa-circle-o-notch\"></i></p>\r\n      </div>\r\n    </div>\r\n    <div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #repayM let-modal>\r\n  <div class=\"modal-body p-4 deposit-modal\">\r\n    <i class=\"fa fa-times closeeBtn\" data-dismiss=\"modal\" (click)=\"modal.dismiss('Cross Click')\"></i>\r\n    <h3 class=\"modalH3\">Repay</h3>\r\n    <div class=\"row mainRow\">\r\n      <div class=\"width40\" style=\"width: 42%;\">\r\n        <img src=\"../../../../../assets/nft/{{img}}.jpg\" style=\"width: 88%;height: 178px;\r\n        border-radius: 8px;\">\r\n        <p class=\"highlightTextModal\">You are repaying the amount you borrowed against <span\r\n            class=\"lightColorTheme\">{{selectedNft.commodity}}</span> earlier.</p>\r\n      </div>\r\n      <div class=\"width60\" style=\"width: 58%;\">\r\n        <p class=\"pModalTxt\" style=\"border-bottom: dashed #e4e4e4;\r\n        padding-bottom: 20px;margin-bottom: 22px;\">Commodity Value : <span class=\"lightColorTheme spanMainCard\">\r\n            {{convertDollarToMatic(eligibleLoanAmount(borrowForm.value.price))}} MATIC ( $\r\n            {{borrowForm.value.price}}\r\n            )</span></p>\r\n        <p class=\"pModalTxt\" style=\"margin-bottom: 24px;\r\n        margin-top: 13px;\">Repayment Amount ( in MATIC ) :\r\n          <input type=\"number\" class=\"inputLoanAmount\" [(ngModel)]=\"repayAmount\" style=\"margin-top: -6px;\"\r\n            (ngModelChange)=\"calculateInterestandTotalAmount($event)\">\r\n        </p>\r\n        <p class=\"pModalTxt\">Interest Applicable ( @13% p.a. ) : <span class=\"lightColorTheme spanMainCard\">\r\n            {{interestApplicableRepay}} MATIC</span></p>\r\n        <p class=\"pModalTxt\">Total Repayment Amount : <span class=\"lightColorTheme spanMainCard\">\r\n            {{totalRepaymentAmount}} MATIC</span></p>\r\n        <p *ngIf=\"!showLoaderForRepay\" style=\"margin-top: 12%;\" class=\"mainBtn repayBtn\"\r\n          (click)=\"handleSubmitRepay('repay', successModal)\">\r\n          Repay Now\r\n        </p>\r\n        <p *ngIf=\"showLoaderForRepay\" style=\"margin-top: 12%;\" class=\"mainBtn repayBtn\"><i\r\n            class=\"fa fa-spin fa-circle-o-notch\"></i></p>\r\n      </div>\r\n    </div>\r\n    <div>\r\n    </div>\r\n  </div>\r\n</ng-template>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { NftListComponent } from './components/nft-list/nft-list.component';\r\nimport { UserNftsComponent } from './components/user-nfts/user-nfts.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'all',\r\n    component: NftListComponent,\r\n  },\r\n  {\r\n    path: 'my',\r\n    component: UserNftsComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NftRoutingModule {}\r\n","import { Component, Input, OnInit, SimpleChange } from '@angular/core';\r\nimport { NftService } from '../../services/nft.service';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { environment } from '../../../../../environments/environment';\r\nimport { ChainlinkAPIService } from 'src/app/common/services/chainlink-api.service';\r\nimport { TopCommodity } from '../../../../common/models/top-commodity';\r\nimport { Web3Service } from 'src/app/common/services/web3.service';\r\nimport { NgbModal, NgbModalConfig } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NftCardComponent } from '../nft-card/nft-card.component'\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\r\n\r\ninterface NftSearchQuery {\r\n  skip?: number;\r\n  limit?: number;\r\n  networkId?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-user-nfts',\r\n  templateUrl: './user-nfts.component.html',\r\n  styleUrls: ['./user-nfts.component.css'],\r\n})\r\nexport class UserNftsComponent implements OnInit {\r\n  @Input() amount: string | undefined;\r\n  fetchedData: boolean = false;\r\n  showSpinner: boolean = false;\r\n  nfts: any[] = [];\r\n  totalAssets: number = 0;\r\n  interestApplicable: any = 0;\r\n  interestApplicableRepay: any = 0;\r\n  totalRepaymentAmount: any = 0;\r\n  platformFees: any = 0;\r\n  eventName: any;\r\n  readOnly: boolean = false;\r\n  totalAssetsValue: number = 0;\r\n  topCommodities: TopCommodity[] = [];\r\n  networkId: string = '';\r\n  selectedNft: any;\r\n  borrowForm: FormGroup;\r\n  img: any;\r\n  showLoaderForRepay: Boolean = false;\r\n  showLoaderForBorrow: Boolean = false;\r\n  borrowSuccess: Boolean = false;\r\n  repaySuccess: Boolean = false;\r\n  borrowAmount: number = 0;\r\n  repayAmount: number = 0;\r\n  urlToViewTransaction: any;\r\n  maticurl = \"https://mumbai.polygonscan.com/tx/\";\r\n\r\n  constructor(\r\n    private nftService: NftService,\r\n    private web3Service: Web3Service,\r\n    private chainlinkService: ChainlinkAPIService,\r\n    private modalService: NgbModal,\r\n    private fb: FormBuilder,\r\n  ) {\r\n    this.borrowForm = this.fb.group({\r\n      borrowAmount: [0],\r\n      repayAmount: [0],\r\n      nftId: [''],\r\n      commodity: [''],\r\n      quantity: [''],\r\n      price: [''],\r\n      borrowStatus: [''],\r\n      amountBorrowed: [''],\r\n      repaymentStatus: [''],\r\n      amountRepayed: [''],\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: any) {\r\n    console.log(changes.amount.currentValue);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.web3Service.bootstrapWeb3().subscribe(\r\n      (accounts: string[]) => {\r\n        this.networkId = accounts[0] || '';\r\n        this.loadData();\r\n      },\r\n      (err) => {\r\n        alert('Web3 bootstrap failed');\r\n      }\r\n    );\r\n  }\r\n\r\n  updateNFTVal() {\r\n    // this.selectedNft = { ...changes.nft.currentValue };\r\n    this.img = this.selectedNft.commodity.replace(\"/\", \"-\", \" \", \"-\", \"  \", \"-\")\r\n\r\n    console.log(this.selectedNft)\r\n\r\n    const {\r\n      _id,\r\n      commodity,\r\n      quantity,\r\n      nftPrice,\r\n      borrowed,\r\n      borrowedAmount,\r\n      repaid,\r\n      repaidAmount,\r\n    } = this.selectedNft;\r\n\r\n    const usdCharges = this.chainlinkService.roundOffDecimal(\r\n      this.chainlinkService.convertInrToUsd(nftPrice)\r\n    );\r\n\r\n    const usdRepaid = this.chainlinkService.roundOffDecimal(\r\n      this.chainlinkService.convertInrToUsd(repaidAmount)\r\n    );\r\n    // const usdBorrowed = this.chainlinkService.roundOffDecimal(\r\n    //   this.chainlinkService.convertInrToUsd(borrowedAmount)\r\n    // );\r\n    const usdBorrowed = this.web3Service.convertToLargestUnit(borrowedAmount) + \" MATIC\"\r\n\r\n    this.borrowForm.patchValue({\r\n      nftId: _id,\r\n      commodity: commodity,\r\n      quantity: quantity,\r\n      price: usdCharges,\r\n      borrowStatus: borrowed,\r\n      amountBorrowed: usdBorrowed,\r\n      repaymentStatus: repaid,\r\n      amountRepaid: usdRepaid,\r\n    });\r\n\r\n    if (borrowed) {\r\n      this.borrowForm.controls.repayAmount.addValidators([\r\n        Validators.required,\r\n        Validators.min(1),\r\n        Validators.max(borrowedAmount),\r\n      ]);\r\n    } else {\r\n      this.borrowForm.controls.borrowAmount.addValidators([\r\n        Validators.required,\r\n        Validators.min(1),\r\n        Validators.max(\r\n          Math.round((usdCharges * 0.7 + Number.EPSILON) * 100) / 100\r\n        ),\r\n      ]);\r\n    }\r\n  }\r\n\r\n\r\n  loadData(query: NftSearchQuery = {}) {\r\n    if (!this.networkId) {\r\n      alert('Web3 network id not found');\r\n      return;\r\n    }\r\n\r\n    this.showSpinner = true;\r\n    const skip = query.skip || this.nfts.length;\r\n    const limit = query.limit || 10;\r\n    const networkId = this.networkId;\r\n\r\n    const searchQuery: NftSearchQuery = {\r\n      skip,\r\n      limit,\r\n      networkId,\r\n    };\r\n\r\n    this.nftService\r\n      .getAllNfts(searchQuery)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.fetchedData = true;\r\n          this.showSpinner = false;\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        this.totalAssets = response.totalAssets;\r\n        this.totalAssetsValue = this.chainlinkService.roundOffDecimal(\r\n          this.chainlinkService.convertInrToUsd(response.totalAssetsValue)\r\n        );\r\n        this.topCommodities = response.topCommodities;\r\n        this.nfts = [...this.nfts, ...response.data];\r\n      });\r\n  }\r\n\r\n  handleBorrow(event: any, modal: any) {\r\n    console.log(event)\r\n\r\n    this.modalService.open(modal, { windowClass: \"BorrowModal\", backdrop: 'static', keyboard: false });\r\n    this.selectedNft = event;\r\n\r\n    // const stringNFT = JSON.stringify(this.selectedNft)\r\n    // const usd = this.chainlinkService.convertInrToUsd(this.selectedNft.nftPrice)\r\n    // console.log(usd, \"usd value\")\r\n    // const commodityValue = this.convertDollarToMatic(usd)\r\n    // console.log(commodityValue, \"commodity value\")\r\n    // const nftValue = this.chainlinkService.convertEthToWei(parseInt(commodityValue))\r\n    // console.log(nftValue, \"nft valuue\")\r\n    // console.log(this.chainlinkService.priceConversions.maticUsd, \"Conversion multiplier\")\r\n    // console.log(this.borrowForm.value.price, \"Price USD\")\r\n    // this.web3Service.artifactsToContractV2().methods.createToken(this.selectedNft._id, stringNFT, nftValue).send({\r\n    //   from: this.web3Service.getAccount()\r\n    // }).then((result: any) => {\r\n    //   console.log(result, \"mint nft result\")\r\n    // })\r\n    // console.log(this.selectedNft.bor, \"matic to usd value\")\r\n    this.updateNFTVal();\r\n  }\r\n\r\n  handleRepay(event: any, modal: any) {\r\n    console.log(event)\r\n    this.modalService.open(modal, { windowClass: \"BorrowModal\", backdrop: 'static', keyboard: false });\r\n    this.selectedNft = event;\r\n    this.updateNFTVal();\r\n  }\r\n  handleSubmitRepay(eventName: any, modal: any) {\r\n    this.eventName = {\r\n      name: eventName,\r\n      modal: modal\r\n    };\r\n    //   this.web3Service.artifactsToContractV2().methods.borrow(1,\"\").send({\r\n    //     from:this.web3Service.getAccount(),\r\n    //     gas:\"210000\"\r\n    // }).then((result:any)=>{\r\n    //   console.log(\"borrow agins nft\",result)\r\n    // })\r\n    const value = {\r\n      nftId: this.borrowForm.value.nftId,\r\n      repayAmount: this.chainlinkService.roundOffDecimal(\r\n        this.chainlinkService.convertUsdToInr(this.repayAmount)\r\n      ),\r\n    };\r\n    this.showLoaderForRepay = true;\r\n    console.log(\"internal brepya\")\r\n    this.web3Service.artifactsToContractV2().methods.getTokenId(this.selectedNft._id).call()\r\n      .then((tokenId: any) => {\r\n        this.web3Service.artifactsToContractV2().methods.getBorrowDetails(tokenId).call()\r\n          .then((borrowDetails: any) => {\r\n            const borrowedAmount = borrowDetails[0]\r\n            const borrowedOn = borrowDetails[1]\r\n            const interest = borrowDetails[2]\r\n            const borrowInterest = this.getBorrowInterest(borrowDetails)\r\n            console.log(borrowInterest, \"Borrow amount\")\r\n            const newAmount = this.repayAmount + borrowInterest\r\n            const amount = this.chainlinkService.convertEthToWei(newAmount)\r\n            console.log(amount, \"repay amount\")\r\n            this.web3Service.artifactsToContractV2().methods.repay(tokenId, Math.round(borrowInterest * 10 ** 18)).send({\r\n              from: this.web3Service.getAccount(),\r\n              gas: \"210000\",\r\n              value: amount\r\n            }).then((result: any) => {\r\n              console.log(\"borrow agins nft\", result)\r\n              this.urlToViewTransaction = this.maticurl + result[\"transactionHash\"]\r\n              this.borrowSuccess = false;\r\n              this.repaySuccess = true;\r\n              this.showLoaderForRepay = false;\r\n              this.modalService.open(modal, { backdrop: 'static', keyboard: false });\r\n              this.updateNft(this.borrowForm.value.nftId, { repayed: true, repayedAmount: amount });\r\n            }).catch((error: any) => {\r\n              this.showLoaderForRepay = false;\r\n              console.log(error, \"Error in while repaying\", error)\r\n            })\r\n            // console.log(borrowInterest,\"Borrowed INterest\")\r\n            // this.borrowForm.controls['amountBorrowed'].setValue(this.web3Service.convertToLargestUnit(borrowDetails[0])+\" MATIC\");\r\n          })\r\n\r\n      })\r\n    // console.log(value)\r\n    // this.showLoaderForRepay = true;\r\n    // this.repayBorrowInternal(value.repayAmount, value.nftId);\r\n  }\r\n  getBorrowInterest(borrowDetails: any): number {\r\n    const currentTime = Math.round(new Date().getTime() / 1000)\r\n    const difference = currentTime - parseInt(borrowDetails[1])\r\n    let days = difference / (60 * 60 * 24)\r\n    let interest;\r\n    days = 1\r\n    if (days >= 1) {\r\n      const principalAmount = parseFloat(this.web3Service.convertToLargestUnit(borrowDetails[0]))\r\n      interest = (days * principalAmount * 0.13) / 365\r\n      return interest\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n\r\n  handleSubmitBorrow(eventName: any, modal: any) {\r\n    this.eventName = {\r\n      name: eventName,\r\n      modal: modal\r\n    };\r\n    console.log(\"INTERNAL BORROW\")\r\n    const amount = this.web3Service.convertToSmallestUnit('0.03')\r\n    console.log(amount, \"amount iwei\")\r\n    this.showLoaderForBorrow = true;\r\n\r\n    this.web3Service.artifactsToContractV2().methods.getTokenId(this.selectedNft._id).call()\r\n      .then((tokenId: any) => {\r\n        console.log(tokenId, \"token id\")\r\n        // const amount = Math.round((this.borrowForm.value.borrowAmount) * (10 ** 18))\r\n        // const amount = Math.round((this.borrowAmount) * (10 ** 18))\r\n        const amount = this.chainlinkService.convertEthToWei(this.borrowAmount)\r\n        console.log(amount, \"amount to borrow\")\r\n        this.web3Service.artifactsToContractV2().methods.borrow(amount, tokenId).send({\r\n          from: this.web3Service.getAccount(),\r\n          gas: \"210000\"\r\n        }).then((result: any) => {\r\n          this.showLoaderForBorrow = false;\r\n          console.log(\"borrow agins nft\", result)\r\n          this.urlToViewTransaction = this.maticurl + result[\"transactionHash\"]\r\n          this.updateNft(this.borrowForm.value.nftId, { borrowed: true, borrowedAmount: amount });\r\n          this.modalService.open(modal, { backdrop: 'static', keyboard: false });\r\n          this.borrowSuccess = true;\r\n        }).catch((error: any) => {\r\n          this.showLoaderForBorrow = false;\r\n          console.log(\"Error while borrowing\", error)\r\n        })\r\n      })\r\n\r\n    const value = {\r\n      nftId: this.borrowForm.value.nftId,\r\n      borrowAmount: this.chainlinkService.roundOffDecimal(\r\n        this.chainlinkService.convertUsdToInr(\r\n          this.borrowForm.value.borrowAmount\r\n        )\r\n      ),\r\n    };\r\n    console.log(value)\r\n    this.showLoaderForBorrow = true;\r\n    // this.borrowInternal(value.borrowAmount, value.nftId);\r\n  }\r\n\r\n  handleShowMore() {\r\n    this.loadData();\r\n  }\r\n\r\n  borrowInternal(amount: number, nftId: string) {\r\n    const usdBorrow = this.chainlinkService.roundOffDecimal(\r\n      this.chainlinkService.convertInrToUsd(amount),\r\n      8\r\n    );\r\n    const usdEth = this.chainlinkService.convertUsdToEth(usdBorrow);\r\n    const ethWei = this.chainlinkService.convertEthToWei(usdEth);\r\n\r\n    const sc = environment.ABI.networks[3].address;\r\n    this.nftService\r\n      .borrowInternal(ethWei, nftId, sc)\r\n      .then((data: any) => {\r\n        console.log(data)\r\n        this.urlToViewTransaction = this.maticurl + data[\"transactionHash\"]\r\n        this.updateNft(nftId, { borrowed: true, borrowedAmount: amount });\r\n      })\r\n      .catch((err: any) => {\r\n        this.showLoaderForRepay = false;\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  repayBorrowInternal(amount: any, nftId: any) {\r\n    const usdRepay = this.chainlinkService.roundOffDecimal(\r\n      this.chainlinkService.convertInrToUsd(amount),\r\n      8\r\n    );\r\n    const usdEth = this.chainlinkService.convertUsdToEth(usdRepay);\r\n    const ethWei = this.chainlinkService.convertEthToWei(usdEth);\r\n\r\n    const sc = environment.ABI.networks[3].address;\r\n\r\n    console.log({ amount, usdRepay, usdEth, ethWei });\r\n\r\n    this.nftService\r\n      .repayBorrowInternal(ethWei, nftId, sc)\r\n      .then((data: any) => {\r\n        console.log(data)\r\n        this.urlToViewTransaction = this.maticurl + data[\"transactionHash\"]\r\n        this.updateNft(nftId, { repayed: true, repayedAmount: amount });\r\n      })\r\n      .catch((err: any) => {\r\n        this.showLoaderForRepay = false;\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  updateNft(nftId: string, obj: object) {\r\n    this.nftService.updateNft(nftId, obj).subscribe((response: any) => {\r\n      const nftIndex = this.nfts.findIndex((nft) => nft._id === nftId);\r\n      this.nfts[nftIndex] = response.data;\r\n      this.selectedNft = response.data;\r\n      this.modalService.dismissAll();\r\n      if (this.eventName.name === 'repay') {\r\n        this.modalService.open(this.eventName.modal)\r\n      }\r\n      if (this.eventName.name === 'borrow') {\r\n        this.modalService.open(this.eventName.modal)\r\n      }\r\n      this.updateNFTVal();\r\n      this.showLoaderForRepay = false;\r\n      this.showLoaderForBorrow = false;\r\n    });\r\n  }\r\n\r\n  viewTransaction() {\r\n    if (this.urlToViewTransaction) {\r\n      window.open(this.urlToViewTransaction, '_blank')\r\n    }\r\n  }\r\n  convertDollarToMatic(val: any) {\r\n    return (val * this.chainlinkService.priceConversions.maticUsd).toFixed(4)\r\n  }\r\n  eligibleLoanAmount(val: any) {\r\n    return (val * (70 / 100)).toFixed(4)\r\n  }\r\n  calculateInterestandPlatformFees(val: number) {\r\n    console.log(val)\r\n    this.borrowAmount = val;\r\n    if (this.borrowAmount) {\r\n      this.interestApplicable = (this.borrowAmount * (13 / 100)).toFixed(4)\r\n      this.platformFees = (this.borrowAmount * (0.25 / 100)).toFixed(4)\r\n    }\r\n  }\r\n  calculateInterestandTotalAmount(val: number) {\r\n    console.log(val)\r\n    this.repayAmount = val;\r\n    if (this.repayAmount) {\r\n      this.interestApplicableRepay = (this.repayAmount * (13 / 100)).toFixed(4)\r\n      this.totalRepaymentAmount = (Number(this.interestApplicableRepay) + Number(this.repayAmount)).toFixed(4);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { NftRoutingModule } from './nft-routing.module';\r\n\r\nimport { NftListComponent } from './components/nft-list/nft-list.component';\r\nimport { NftCardComponent } from './components/nft-card/nft-card.component';\r\nimport { UserNftsComponent } from './components/user-nfts/user-nfts.component';\r\n\r\n@NgModule({\r\n  providers: [],\r\n  declarations: [NftListComponent, NftCardComponent, UserNftsComponent],\r\n  imports: [CommonModule, ReactiveFormsModule, NftRoutingModule, FormsModule],\r\n})\r\nexport class NftModule {}\r\n"],"sourceRoot":"webpack:///","file":"src_app_modules_nft_nft_module_ts.js"}