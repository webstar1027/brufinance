/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Commons, CommonsInterface } from "../Commons";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "freeTokens",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lienTokens",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "walletType",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "farmerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "grainDetail",
    outputs: [
      {
        internalType: "string",
        name: "otherDetails",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "commodity",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiryDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "repaymentLoanAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "marketValueAtTheTimeDepositPerUnit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalMarketValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deliveredToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lienToken",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "lienStatus",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "totalLoanAmount",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "whrStatus",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isAudit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isInsurance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "numberOfCmaAudits",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "numberOfLoans",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "valuePerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260008060146101000a81548160ff021916908360ff16021790555060008060156101000a81548160ff021916908360ff160217905550600060015534801561004b57600080fd5b506105328061005b6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a8fa8e5211610066578063a8fa8e5214610253578063b7b58b7f14610271578063c6be2371146102bb578063d022c638146102dd578063e390a1b81461030157610093565b806304f535491461009857806327e235e3146100bc57806364494699146101285780638da5cb5b14610209575b600080fd5b6100a0610323565b604051808260ff1660ff16815260200191505060405180910390f35b6100fe600480360360208110156100d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610336565b604051808481526020018381526020018260ff1660ff168152602001935050505060405180910390f35b61013061036d565b60405180806020018e81526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001868152602001851515151581526020018481526020018360ff1660ff16815260200182810382528f818151815260200191508051906020019080838360005b838110156101c25780820151818401526020810190506101a7565b50505050905090810190601f1680156101ef5780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b610211610473565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025b610499565b6040518082815260200191505060405180910390f35b61027961049f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102c36104c4565b604051808215151515815260200191505060405180910390f35b6102e56104d7565b604051808260ff1660ff16815260200191505060405180910390f35b6103096104ea565b604051808215151515815260200191505060405180910390f35b600060159054906101000a900460ff1681565b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b6004806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104075780601f106103dc57610100808354040283529160200191610407565b820191906000526020600020905b8154815290600101906020018083116103ea57829003601f168201915b50505050509080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a0160009054906101000a900460ff169080600b01549080600c0160009054906101000a900460ff1690508d565b600360029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900460ff1681565b600060149054906101000a900460ff1681565b600360019054906101000a900460ff168156fea265627a7a72315820663ac066b9afe10e0f7e3e6f8c9cfe07cd3e4d3eeacb1b382829d9e8cbb64e0064736f6c634300050e0032";

export class Commons__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Commons> {
    return super.deploy(overrides || {}) as Promise<Commons>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Commons {
    return super.attach(address) as Commons;
  }
  connect(signer: Signer): Commons__factory {
    return super.connect(signer) as Commons__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommonsInterface {
    return new utils.Interface(_abi) as CommonsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Commons {
    return new Contract(address, _abi, signerOrProvider) as Commons;
  }
}
