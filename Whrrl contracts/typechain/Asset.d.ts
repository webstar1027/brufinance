/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AssetInterface extends ethers.utils.Interface {
  functions: {
    "UpdateAuditReport(string,bytes32,bytes32,uint256,uint256,bytes32,uint8)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "bankLoanIds(uint256)": FunctionFragment;
    "bankLoans(uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "cmaAudits(uint256)": FunctionFragment;
    "farmerAddress()": FunctionFragment;
    "grainDetail()": FunctionFragment;
    "insuranceDetails()": FunctionFragment;
    "isAudit()": FunctionFragment;
    "isInsurance()": FunctionFragment;
    "killToken()": FunctionFragment;
    "loanDetailsById(bytes32)": FunctionFragment;
    "loanDisburs(uint256,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "numberOfCmaAudits()": FunctionFragment;
    "numberOfLoans()": FunctionFragment;
    "owner()": FunctionFragment;
    "repayment(uint256,bytes32,uint256,uint256)": FunctionFragment;
    "repayments(uint256)": FunctionFragment;
    "updateInsurance(string,bytes32,uint256,uint256,uint256,bool)": FunctionFragment;
    "valuePerToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "UpdateAuditReport",
    values: [
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bankLoanIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bankLoans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cmaAudits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grainDetail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAudit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInsurance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "killToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "loanDetailsById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loanDisburs",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfCmaAudits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfLoans",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayment",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInsurance",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "valuePerToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UpdateAuditReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bankLoanIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bankLoans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cmaAudits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grainDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAudit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanDetailsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanDisburs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfCmaAudits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valuePerToken",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, BigNumber] & { _from: string; _value: BigNumber }
>;

export class Asset extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AssetInterface;

  functions: {
    UpdateAuditReport(
      remark: string,
      gainName: BytesLike,
      gainGrade: BytesLike,
      value: BigNumberish,
      quantity: BigNumberish,
      cmaId: BytesLike,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        freeTokens: BigNumber;
        lienTokens: BigNumber;
        walletType: number;
      }
    >;

    bankLoanIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bankLoans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        timestamp: BigNumber;
        bankId: string;
        amount: BigNumber;
        tokens: BigNumber;
        rateOfInterest: BigNumber;
        emiAmount: BigNumber;
        remainingAmount: BigNumber;
        lienTokens: BigNumber;
        tenur: BigNumber;
        status: boolean;
      }
    >;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cmaAudits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, string, number] & {
        remark: string;
        gainName: string;
        gainGrade: string;
        valuePerToken: BigNumber;
        quantity: BigNumber;
        cmaId: string;
        status: number;
      }
    >;

    farmerAddress(overrides?: CallOverrides): Promise<[string]>;

    grainDetail(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number
      ] & {
        otherDetails: string;
        commodity: string;
        quantity: BigNumber;
        timestamp: BigNumber;
        expiryDate: BigNumber;
        repaymentLoanAmount: BigNumber;
        marketValueAtTheTimeDepositPerUnit: BigNumber;
        totalMarketValue: BigNumber;
        deliveredToken: BigNumber;
        lienToken: BigNumber;
        lienStatus: boolean;
        totalLoanAmount: BigNumber;
        whrStatus: number;
      }
    >;

    insuranceDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        componyName: string;
        policeId: string;
        amount: BigNumber;
        fromDate: BigNumber;
        endDate: BigNumber;
        status: boolean;
      }
    >;

    isAudit(overrides?: CallOverrides): Promise<[boolean]>;

    isInsurance(overrides?: CallOverrides): Promise<[boolean]>;

    killToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loanDetailsById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        timestamp: BigNumber;
        bankId: string;
        amount: BigNumber;
        tokens: BigNumber;
        rateOfInterest: BigNumber;
        emiAmount: BigNumber;
        remainingAmount: BigNumber;
        lienTokens: BigNumber;
        tenur: BigNumber;
        status: boolean;
      }
    >;

    loanDisburs(
      timestamp: BigNumberish,
      loanId: BytesLike,
      bankId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      rateOfInterest: BigNumberish,
      emiAmount: BigNumberish,
      tenur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numberOfCmaAudits(overrides?: CallOverrides): Promise<[number]>;

    numberOfLoans(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    repayment(
      timestamp: BigNumberish,
      loanId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        loanId: string;
        bankId: string;
        amount: BigNumber;
        tokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    updateInsurance(
      _componyName: string,
      _policeId: BytesLike,
      _amount: BigNumberish,
      _fromDate: BigNumberish,
      _endDate: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    valuePerToken(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  UpdateAuditReport(
    remark: string,
    gainName: BytesLike,
    gainGrade: BytesLike,
    value: BigNumberish,
    quantity: BigNumberish,
    cmaId: BytesLike,
    _status: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      freeTokens: BigNumber;
      lienTokens: BigNumber;
      walletType: number;
    }
  >;

  bankLoanIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  bankLoans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      timestamp: BigNumber;
      bankId: string;
      amount: BigNumber;
      tokens: BigNumber;
      rateOfInterest: BigNumber;
      emiAmount: BigNumber;
      remainingAmount: BigNumber;
      lienTokens: BigNumber;
      tenur: BigNumber;
      status: boolean;
    }
  >;

  burn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cmaAudits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, string, number] & {
      remark: string;
      gainName: string;
      gainGrade: string;
      valuePerToken: BigNumber;
      quantity: BigNumber;
      cmaId: string;
      status: number;
    }
  >;

  farmerAddress(overrides?: CallOverrides): Promise<string>;

  grainDetail(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      number
    ] & {
      otherDetails: string;
      commodity: string;
      quantity: BigNumber;
      timestamp: BigNumber;
      expiryDate: BigNumber;
      repaymentLoanAmount: BigNumber;
      marketValueAtTheTimeDepositPerUnit: BigNumber;
      totalMarketValue: BigNumber;
      deliveredToken: BigNumber;
      lienToken: BigNumber;
      lienStatus: boolean;
      totalLoanAmount: BigNumber;
      whrStatus: number;
    }
  >;

  insuranceDetails(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      componyName: string;
      policeId: string;
      amount: BigNumber;
      fromDate: BigNumber;
      endDate: BigNumber;
      status: boolean;
    }
  >;

  isAudit(overrides?: CallOverrides): Promise<boolean>;

  isInsurance(overrides?: CallOverrides): Promise<boolean>;

  killToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loanDetailsById(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      timestamp: BigNumber;
      bankId: string;
      amount: BigNumber;
      tokens: BigNumber;
      rateOfInterest: BigNumber;
      emiAmount: BigNumber;
      remainingAmount: BigNumber;
      lienTokens: BigNumber;
      tenur: BigNumber;
      status: boolean;
    }
  >;

  loanDisburs(
    timestamp: BigNumberish,
    loanId: BytesLike,
    bankId: BytesLike,
    amount: BigNumberish,
    tokens: BigNumberish,
    rateOfInterest: BigNumberish,
    emiAmount: BigNumberish,
    tenur: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numberOfCmaAudits(overrides?: CallOverrides): Promise<number>;

  numberOfLoans(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  repayment(
    timestamp: BigNumberish,
    loanId: BytesLike,
    amount: BigNumberish,
    tokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayments(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      loanId: string;
      bankId: string;
      amount: BigNumber;
      tokens: BigNumber;
      timestamp: BigNumber;
    }
  >;

  updateInsurance(
    _componyName: string,
    _policeId: BytesLike,
    _amount: BigNumberish,
    _fromDate: BigNumberish,
    _endDate: BigNumberish,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  valuePerToken(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    UpdateAuditReport(
      remark: string,
      gainName: BytesLike,
      gainGrade: BytesLike,
      value: BigNumberish,
      quantity: BigNumberish,
      cmaId: BytesLike,
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        freeTokens: BigNumber;
        lienTokens: BigNumber;
        walletType: number;
      }
    >;

    bankLoanIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    bankLoans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        timestamp: BigNumber;
        bankId: string;
        amount: BigNumber;
        tokens: BigNumber;
        rateOfInterest: BigNumber;
        emiAmount: BigNumber;
        remainingAmount: BigNumber;
        lienTokens: BigNumber;
        tenur: BigNumber;
        status: boolean;
      }
    >;

    burn(value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    cmaAudits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, string, number] & {
        remark: string;
        gainName: string;
        gainGrade: string;
        valuePerToken: BigNumber;
        quantity: BigNumber;
        cmaId: string;
        status: number;
      }
    >;

    farmerAddress(overrides?: CallOverrides): Promise<string>;

    grainDetail(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        number
      ] & {
        otherDetails: string;
        commodity: string;
        quantity: BigNumber;
        timestamp: BigNumber;
        expiryDate: BigNumber;
        repaymentLoanAmount: BigNumber;
        marketValueAtTheTimeDepositPerUnit: BigNumber;
        totalMarketValue: BigNumber;
        deliveredToken: BigNumber;
        lienToken: BigNumber;
        lienStatus: boolean;
        totalLoanAmount: BigNumber;
        whrStatus: number;
      }
    >;

    insuranceDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        componyName: string;
        policeId: string;
        amount: BigNumber;
        fromDate: BigNumber;
        endDate: BigNumber;
        status: boolean;
      }
    >;

    isAudit(overrides?: CallOverrides): Promise<boolean>;

    isInsurance(overrides?: CallOverrides): Promise<boolean>;

    killToken(overrides?: CallOverrides): Promise<boolean>;

    loanDetailsById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        timestamp: BigNumber;
        bankId: string;
        amount: BigNumber;
        tokens: BigNumber;
        rateOfInterest: BigNumber;
        emiAmount: BigNumber;
        remainingAmount: BigNumber;
        lienTokens: BigNumber;
        tenur: BigNumber;
        status: boolean;
      }
    >;

    loanDisburs(
      timestamp: BigNumberish,
      loanId: BytesLike,
      bankId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      rateOfInterest: BigNumberish,
      emiAmount: BigNumberish,
      tenur: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numberOfCmaAudits(overrides?: CallOverrides): Promise<number>;

    numberOfLoans(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    repayment(
      timestamp: BigNumberish,
      loanId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        loanId: string;
        bankId: string;
        amount: BigNumber;
        tokens: BigNumber;
        timestamp: BigNumber;
      }
    >;

    updateInsurance(
      _componyName: string,
      _policeId: BytesLike,
      _amount: BigNumberish,
      _fromDate: BigNumberish,
      _endDate: BigNumberish,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    valuePerToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Burn(address,uint256)"(
      _from?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _value: BigNumber }
    >;

    Burn(
      _from?: string | null,
      _value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { _from: string; _value: BigNumber }
    >;
  };

  estimateGas: {
    UpdateAuditReport(
      remark: string,
      gainName: BytesLike,
      gainGrade: BytesLike,
      value: BigNumberish,
      quantity: BigNumberish,
      cmaId: BytesLike,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bankLoanIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bankLoans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cmaAudits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    grainDetail(overrides?: CallOverrides): Promise<BigNumber>;

    insuranceDetails(overrides?: CallOverrides): Promise<BigNumber>;

    isAudit(overrides?: CallOverrides): Promise<BigNumber>;

    isInsurance(overrides?: CallOverrides): Promise<BigNumber>;

    killToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loanDetailsById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanDisburs(
      timestamp: BigNumberish,
      loanId: BytesLike,
      bankId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      rateOfInterest: BigNumberish,
      emiAmount: BigNumberish,
      tenur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numberOfCmaAudits(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfLoans(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    repayment(
      timestamp: BigNumberish,
      loanId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateInsurance(
      _componyName: string,
      _policeId: BytesLike,
      _amount: BigNumberish,
      _fromDate: BigNumberish,
      _endDate: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    valuePerToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    UpdateAuditReport(
      remark: string,
      gainName: BytesLike,
      gainGrade: BytesLike,
      value: BigNumberish,
      quantity: BigNumberish,
      cmaId: BytesLike,
      _status: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bankLoanIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bankLoans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cmaAudits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grainDetail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insuranceDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAudit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInsurance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    killToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loanDetailsById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanDisburs(
      timestamp: BigNumberish,
      loanId: BytesLike,
      bankId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      rateOfInterest: BigNumberish,
      emiAmount: BigNumberish,
      tenur: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numberOfCmaAudits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfLoans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayment(
      timestamp: BigNumberish,
      loanId: BytesLike,
      amount: BigNumberish,
      tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateInsurance(
      _componyName: string,
      _policeId: BytesLike,
      _amount: BigNumberish,
      _fromDate: BigNumberish,
      _endDate: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    valuePerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
