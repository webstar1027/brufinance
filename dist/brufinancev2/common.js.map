{"version":3,"mappings":"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","names":["NftService","constructor","http","web3Service","dataS","this","wallet","getAccount","getAllNfts","params","get","environment","getHash","depositApplicationId","nftId","post","headers","lockAsset","updateNft","obj","patch","ethBalance","to","getBalance","sc","account","console","log","artifactsToContract","methods","balanceOf","call","from","err","res","getExchangeRate","exchangeRateStored","getTotalDeposit","balance","address","totalSupply","mintInternal","amount","send","value","borrowInternal","nftid","BigInt","repayBorrowInternal","redeemInternal","events","Test1","event","i0","factory"],"sources":["./src/app/modules/nft/services/nft.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Web3Service } from '../../../common/services/web3.service';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { ChainlinkAPIService } from 'src/app/common/services/chainlink-api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NftService {\r\n  wallet = '';\r\n  amount: any;\r\n  wamount: any;\r\n  nftid: any;\r\n  BTKNAmount: any;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private web3Service: Web3Service,\r\n    private dataS: ChainlinkAPIService\r\n  ) {\r\n    this.wallet = 'https://uat-warehouses.whrrl.in/api/mswc/';\r\n    this.web3Service.getAccount();\r\n  }\r\n\r\n  getAllNfts(params: {}) {\r\n    return this.http.get(environment.baseURL + '/api/v1/nfts/nftData', {\r\n      params,\r\n    });\r\n  }\r\n\r\n  getHash(depositApplicationId:any,nftId:any){\r\n    return this.http.post(environment.baseURL+ '/api/v1/nfts/hash',{depositApplicationId,nftId},{\r\n      headers:{\r\n        'content-Type':'application/json'\r\n      }\r\n    })\r\n  }\r\n\r\n  lockAsset(depositApplicationId:any){\r\n    return this.http.post(environment.baseURL+ '/api/v1/nfts/hash',{depositApplicationId},{\r\n      headers:{\r\n        'content-Type':'application/json'\r\n      }\r\n    })\r\n  }\r\n\r\n  updateNft(nftId: string, obj: object) {\r\n    return this.http.patch(\r\n      environment.baseURL + '/api/v1/nfts/nftData/' + nftId,\r\n      obj\r\n    );\r\n  }\r\n\r\n  ethBalance(to: any) {\r\n    return this.http.get(this.wallet + `eth-balance/${to}/`);\r\n  }\r\n\r\n  getBalance(sc: any) {\r\n    const account = this.web3Service.getAccount();\r\n    console.log('get BTK balance of ', account);\r\n    return this.web3Service\r\n      .artifactsToContract(sc)\r\n      .methods.balanceOf(account)\r\n      .call(\r\n        {\r\n          from: account,\r\n          to: sc,\r\n        },\r\n        function (err: any, res: any) {\r\n          if (res) {\r\n            console.log('****************');\r\n            console.log(res);\r\n          } else {\r\n            console.log(err);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  getExchangeRate(sc : any) {\r\n    const account = this.web3Service.getAccount();\r\n    return this.web3Service\r\n    .artifactsToContract(sc)\r\n    .methods.exchangeRateStored()\r\n    .call(\r\n      {\r\n        from: account,\r\n        to: sc,\r\n      },\r\n      function (err: any, res: any) {\r\n        if (res) {\r\n          console.log('****************');\r\n          console.log(res);\r\n        } else {\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getTotalDeposit(sc : any) {\r\n    const account = this.web3Service.getAccount();\r\n    console.log('get ETH balance of ', account);\r\n    return this.web3Service\r\n      .artifactsToContract(sc)\r\n      .methods.balanceOf(account)\r\n      .call(\r\n        {\r\n          from: account,\r\n          to: sc,\r\n        },\r\n        function (err: any, res: any) {\r\n          if (res) {\r\n            console.log('****************');\r\n            console.log(res);\r\n          } else {\r\n            console.log(err);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  balance(address: any) {\r\n    console.log('(((((((((((((((');\r\n    return this.web3Service.getBalance(address);\r\n  }\r\n\r\n  totalSupply(sc: any) {\r\n    return this.web3Service\r\n      .artifactsToContract(sc)\r\n      .methods.totalSupply()\r\n      .call(\r\n        {\r\n          from: this.web3Service.getAccount(),\r\n          to: sc,\r\n        },\r\n        function (err: any, res: any) {\r\n          if (res) {\r\n            console.log(res);\r\n          } else {\r\n            console.log(err);\r\n          }\r\n        }\r\n      );\r\n  }\r\n  // sc = environment.ABI.networks[3].address;\r\n  mintInternal(amount: any, sc: any): Promise<any> {\r\n    this.amount = amount;\r\n    return this.web3Service\r\n      .artifactsToContract(sc)\r\n      .methods.mintInternal()\r\n      .send(\r\n        {\r\n          from: this.web3Service.getAccount(),\r\n          to: sc,\r\n          value: this.amount * 1000000000000000000,\r\n        },\r\n        function (err: any, res: any) {\r\n          if (res) {\r\n            console.log(res);\r\n          } else {\r\n            console.log(err);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  borrowInternal(amount: any, nftid: any, sc: any): Promise<any> {\r\n    this.web3Service.sc = sc;\r\n    this.amount = BigInt(amount);\r\n    this.nftid = nftid;\r\n    return this.web3Service\r\n      .artifactsToContract(sc)\r\n      .methods.borrowInternal(this.amount)\r\n      .send(\r\n        { from: this.web3Service.getAccount(), to: sc },\r\n        function (err: any, res: any) {\r\n          if (res) {\r\n            console.log(res);\r\n          } else {\r\n            console.log(err);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  repayBorrowInternal(amount: any, nftid: any, sc: any): Promise<any> {\r\n    this.nftid = nftid;\r\n    return this.web3Service\r\n      .artifactsToContract(sc)\r\n      .methods.repayBorrowInternal()\r\n      .send(\r\n        {\r\n          from: this.web3Service.getAccount(),\r\n          to: sc,\r\n          value: amount,\r\n        },\r\n        function (err: any, res: any) {\r\n          if (res) {\r\n            console.log(res);\r\n          } else {\r\n            console.log(err);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  redeemInternal(amount: any, sc: any): Promise<any> {\r\n    // this.wamount = amount;\r\n    // console.log(\"wamount \", this.wamount);\r\n    console.log(amount)\r\n    const res = this.web3Service\r\n      .artifactsToContract(sc)\r\n      .methods.redeemInternal(amount)\r\n      .send(\r\n        {\r\n          from: this.web3Service.getAccount(),\r\n          to: sc,\r\n        },\r\n        function (err: any, res: any) {\r\n          if (res) {\r\n            console.log(\"==============res============\", res);\r\n          } else {\r\n            console.log('==========error============', err);\r\n          }\r\n        }\r\n      );\r\n      console.log(\"-----events-------------\",this.web3Service.artifactsToContract(sc).events.Test1())\r\n      this.web3Service.artifactsToContract(sc).events.Test1((err: any, event: any)=>{\r\n        console.log(\"=====Test1===========\",err, event);\r\n      })\r\n      // console.log(res)\r\n    return res;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"common.js"}